/**** Grid.as  	January 2010** @author Charles S.Davis** Draws a grid of vertical & horizontal lines with optional background** Licensed under the MIT License* * Copyright (c) 2009 Charles S.Davis* * Permission is hereby granted, free of charge, to any person obtaining a copy of* this software and associated documentation files (the "Software"), to deal in* the Software without restriction, including without limitation the rights to* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of* the Software, and to permit persons to whom the Software is furnished to do so,* subject to the following conditions:* * The above copyright notice and this permission notice shall be included in all* copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.* * http://www.opensource.org/licenses/mit-license.php*    */package com.nudoru.visual.drawing{	import flash.display.Sprite;		public class Grid extends Sprite	{		public var gwidth:uint;		public var gheight:uint;		public var spacing:uint;		public var lineWeight:uint;		public var lineColor:uint;		public var bcolor:uint;				/**		 *	 PARAMS:		@param      gwidth, gheight		uint  		dimensions of grid		 *   				@param		spacing				uint		spacing between grid lines		 *					@param 		lineWeight			Number		thickness of lines		 *					@param		lineColor			uint		line color		 *					@param      bgColor				uint   		optional color for background - if not required leave blank		 *		 *		 *   USAGE:   		import com.dtk.GridLoader;		 *		 *		 *					var g:Grid = new Grid( gwidth, gheight, spacing, lineWeight, lineColor, ...bgColor(optional) );		 *					g.x = x;		 *					g.y = y; 		 *            		addChild( g );		 *		 */		public function Grid ( gwidth:uint, gheight:uint, spacing:uint, lineWeight:Number, lineColor:uint, ...bgColor ):void		{			this.gwidth     = gwidth;			this.gheight    = gheight;			this.spacing    = spacing;			this.lineWeight = lineWeight;			this.lineColor  = lineColor;						// if background color is specified in parameters draw backgound			if ( bgColor.length > 0 )			{				this.bcolor = bgColor[0];				drawBG( bcolor );			}						// draw grid			drawGrid();		}				/**		 *	draw background if specified in parameters		 *		 */		private function drawBG( bcolor:uint ):void		{			var bg:Sprite = new Sprite();			bg.graphics.beginFill( bcolor );			bg.graphics.drawRect( 0, 0, gwidth, gheight );			bg.graphics.endFill();			addChild( bg );		}				/**		 *	draw grid		 *		 */		private function drawGrid():void		{			// calculate rows & columns required based on spacing			var rows:uint    = gheight / spacing;			var columns:uint = gwidth / spacing;						// set starting position			var xPos:uint = 0;			var yPos:uint = 0;						// draw all verticals			for ( var i:uint=0; i<=columns; i++ )			{				var v:Sprite = new Sprite();				v.graphics.lineStyle( lineWeight, lineColor, 1 );				v.graphics.moveTo( xPos, yPos );				v.graphics.lineTo( xPos, yPos+gheight );				addChild( v );								// increment horizontal spacing				xPos += spacing;			}						// reset starting position			xPos = 0;			yPos = 0;						// draw all horizontals			for ( var j:uint=0; j<=rows; j++ )			{				var h:Sprite = new Sprite();				h.graphics.lineStyle( lineWeight, lineColor, 1 );				h.graphics.moveTo( xPos, yPos );				h.graphics.lineTo( xPos+gwidth, yPos );				addChild( h );								// increment vertical spacing				yPos += spacing;			}		}	}}