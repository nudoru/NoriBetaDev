/**** Diagonals.as  	November 2009** @author Charles S.Davis** Draws a field of parallel diagonal lines** Licensed under the MIT License* * Copyright (c) 2009 Charles S.Davis* * Permission is hereby granted, free of charge, to any person obtaining a copy of* this software and associated documentation files (the "Software"), to deal in* the Software without restriction, including without limitation the rights to* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of* the Software, and to permit persons to whom the Software is furnished to do so,* subject to the following conditions:* * The above copyright notice and this permission notice shall be included in all* copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.* * http://www.opensource.org/licenses/mit-license.php*    */package com.nudoru.visual.drawing{	import flash.display.Sprite;		public class Diagonals extends Sprite	{		public var fieldWidth:uint;		public var fieldHeight:uint;		public var lineWeight:uint;		public var lineColor:uint;		public var lineAlpha:Number;		public var angle:Number;		public var spacing:uint;				private var lineLength:uint;		private var offset:uint;		private var extraLines:uint;		private var numLines:uint;		private var xPos:int;		private var yPos:int;		private var field:Sprite;		private var fieldMask:Sprite;				/**		 *	 PARAMS:		@param		fieldWidth, fieldHeight		uint		field dimensions		 *   				@param		lineWeight					uint		line thickness		 *					@param 		lineColor					uint		line color		 *					@param		lineAlpha					uint		line transparency (0 to 1)		 *					@param		angle						Number		angle of diagonals		 *					@param		spacing						uint		spacing between diagonals		 *		 *		 *   USAGE:			import com.dtk.Diagonals;		 *		 *					var d:Diagonals = new Diagonals( fieldWidth, fieldHeight, lineWeight, lineColor, lineAlpha, angle, spacing );		 *					d.x = x;		 *					d.y = y;		 *            		addChild( d );		 */		public function Diagonals ( fieldWidth:uint, fieldHeight:uint, lineWeight:uint, lineColor:uint, lineAlpha:Number, angle:Number, spacing:uint ):void		{			this.fieldWidth  = fieldWidth;			this.fieldHeight = fieldHeight;			this.lineWeight  = lineWeight;			this.lineColor   = lineColor;			this.lineAlpha   = lineAlpha;			this.angle       = angle;			this.spacing     = spacing;					drawDiagonals();		}				/**		 *	draw all diagonals & mask field		 *		 */		private function drawDiagonals():void		{			// diagonal length of line for given angle & height			lineLength = Math.round( fieldHeight / Math.cos( angle * Math.PI/180 ));			// horizontal offset			offset = Math.round( fieldHeight / Math.tan( angle * Math.PI/180 ));			// extraLines lines at beginning & end			extraLines = offset / spacing;			// number of line required			numLines = ( fieldWidth / spacing ) + ( 2 * extraLines );			// starting position			xPos = - ( extraLines * spacing );			yPos = fieldHeight;						field = new Sprite();						// draw required diagonals			for ( var i:uint=0; i<numLines; i++ )			{				/**				 *  NOTE: uncomment next line to randomize transparency of diagonals:  generates between .2 and 1.0				 */				//lineAlpha = (Math.round(Math.random() * 8) + 2) * 0.1;								// draw single instance of diagonal line				var line:Sprite = new Sprite();				line.graphics.lineStyle( lineWeight, lineColor, lineAlpha );				line.graphics.moveTo ( xPos, yPos );				line.graphics.lineTo ( xPos+offset, 0 );				field.addChild( line );  								// go to next diagonal				xPos += spacing;			}			addChild( field ); 						// mask diagonals to trim beginning & ending diagonals			fieldMask = new Sprite();			fieldMask.graphics.beginFill( 0x999999 );			fieldMask.graphics.drawRect( 0, 0, fieldWidth, fieldHeight );			fieldMask.graphics.endFill();			addChild( fieldMask );			field.mask = fieldMask;		}	}}