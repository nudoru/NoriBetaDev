/**** DottedField.as  	November 2009** @author Charles S.Davis** Draws a rectangular field of dots** Licensed under the MIT License* * Copyright (c) 2009 Charles S.Davis* * Permission is hereby granted, free of charge, to any person obtaining a copy of* this software and associated documentation files (the "Software"), to deal in* the Software without restriction, including without limitation the rights to* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of* the Software, and to permit persons to whom the Software is furnished to do so,* subject to the following conditions:* * The above copyright notice and this permission notice shall be included in all* copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.* * http://www.opensource.org/licenses/mit-license.php*    */package com.nudoru.visual.drawing{	import flash.display.Sprite;		public class DottedField extends Sprite	{		public var fieldWidth:uint;		public var fieldHeight:uint;		public var dotSize:uint;		public var dotColor:uint;		public var dotSpacing:uint;				private var xPos:uint;		private var yPos:uint;		private var rows:uint;		private var columns:uint;				/**		 *		PARAMS:			@param  		fieldWidth			uint		width of field		 *						@param			fieldHeight			uint		height of field		 * 	 					@param			dotSize				uint    	size of each dot in pixels		 *						@param			dotColor			uint		color of dots		 *						@param			dotSpacing			uint		spacing between each dot - 3px or greater		 *				 		 *		NOTE:			spacing between dots should divide evenly into field width & height		 *		 *		USAGE:			var newVar:DottedField = new DottedField( fieldWidth, fieldHeight, dotSize, dotColor, dotSpacing );		 *						newVar.x = x;		 *						newVar.y = y;		 *						addChild( newVar );		 *		 */		public function DottedField ( fieldWidth:uint, fieldHeight:uint, dotSize:uint, dotColor:uint, dotSpacing:uint ):void		{			this.fieldWidth  = fieldWidth;			this.fieldHeight = fieldHeight;			this.dotSize     = dotSize;			this.dotColor    = dotColor;			this.dotSpacing  = dotSpacing;						drawField();		}				/*		 *	calculate rows x columns of field & draw		 *		 */		private function drawField():void		{			// determine number of rows & columns of dots to draw			var columns:int    = fieldWidth / dotSpacing;			var rows:int = fieldHeight / dotSpacing;						// init starting position			xPos = 0;			yPos = 0;						// set line style based on param's			if ( dotSize == 1 )			{				this.graphics.lineStyle( 1, dotColor, 1 );			}			else			{				this.graphics.lineStyle( 0, dotColor, 1 );				this.graphics.beginFill( dotColor );			}						// loop through rows			for ( var i:int=0; i<rows; i++ )			{				// for each new row, reset x position to 0				xPos = 0;					// loop through columns & draw dot at spec'd position				for ( var j:uint=0; j<columns; j++)				{					// if dot size is 1 then draw a line with line width equal to 1					if ( dotSize == 1 )					{						this.graphics.moveTo( xPos, yPos );						this.graphics.lineTo( xPos+dotSize, yPos );					}					// else draw rectangle that is a square of dim. dotSize					else					{						this.graphics.moveTo( xPos, yPos );						this.graphics.lineTo( xPos+dotSize, yPos );						this.graphics.lineTo( xPos+dotSize, yPos+dotSize );						this.graphics.lineTo( xPos, yPos+dotSize );						this.graphics.lineTo( xPos, yPos );						this.graphics.endFill();					}										// go to next column					xPos += dotSpacing;				}								// go to next row				yPos += dotSpacing;			}		}	}}